Next up:

* Connect Parser/Context with Collection/Task
    * CLI test is just a stub right now, uses empty parser, does nothing with
      collection given
    * Need one Context created per Task, and added to the Parser
        * Perhaps Task.to_context()? (Context should not know about Task
        ideally)
            * Or Collection.contexts()?
        * Needs to go from kwargs to Argument objects
        * And handle name/alias/etc
    * Also need to handle initial Context for e.g. `-c`.
        * Stored in the main cli module?
        * Allow users to override/modify this at some point, this would be how
        they add new core options or whatever

Specific things to improve:

* Loader.load_collection should get broken up into multiple smaller
  methods.

API design questions:

* How to handle 1-to-N things like task aliases?
    * Single iterable argument only, eg @task(aliases=('foo', 'bar'))
        * Plus: simple implementation, simple API
        * Minus: requires users to do more work in base case of one alias
    * Singular and plural forms coexisting, e.g. alias='foo' AND
      aliases=('foo', 'bar')
        * Plus: Base case is now handled
        * Minus: complicates implementation, API, adds concerns like "what
          happens if both are given?"

Big questions:

* How to go from subprocess.PIPE to something custom which is capable of
  middleware-type functionality (e.g. logging, mutating etc)?
* How to handle global settings without requiring all functionality to be
  method calls on an object?
    * Require all functionality to be calls on an object, and allow users to
      use an implicit module-global object as the default target?

<!-- vim:set ft=markdown : -->
